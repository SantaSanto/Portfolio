{"version":3,"sources":["components/Page/PageMenu.js","components/Page/PageBar.js","components/Page/index.js","components/Page/Section.js","components/PortfolioList/PortfolioListIcon.js","components/PortfolioList/PortfolioListItem.js","components/PortfolioList/index.js","service/PortfolioDAO.js","service/PortfolioService.js","page/HomePage.js","components/Form/index.js","page/FolioForm.js","components/ListIcon/index.js","components/AssetList/AssetListItem.js","components/AssetList/index.js","service/asset/AssetDAO.js","service/asset/AssetService.js","page/Folio.js","page/AssetForm.js","components/TxnList/TxnListItem.js","components/TxnList/index.js","service/AbstractService.js","dao/TxnDao.js","dao/AbstractDao.js","service/TxnService.js","page/Asset.js","page/TxnForm.js","page/PageRouter.js","App.js","serviceWorker.js","index.js"],"names":["origin","vertical","horizontal","PageMenu","menuProps","React","useState","open","setOpen","Fragment","onClick","Menu","anchorOrigin","transformOrigin","keepMounted","onClose","map","url","label","MenuItem","component","href","useStyles","makeStyles","theme","title","paddingLeft","paddingRight","flexGrow","PageBar","iconProps","AppBar","position","Toolbar","PageIcon","type","Link","color","iconStrategy","PageTitle","style","Typography","variant","className","Page","props","children","CardHeader","paddingBottom","content","paddingTop","titleTypographyProps","Section","index","selectedTab","Card","CardContent","orange","palette","getContrastText","deepOrange","backgroundColor","purple","deepPurple","PortfolioListIcon","letter","avatarColor","Math","floor","random","randomColor","ListItemAvatar","Avatar","PortfolioListItem","folio","_id","name","desc","charAt","toUpperCase","ListItem","key","button","ListItemText","primary","secondary","PortfolioList","folios","List","db","PouchDB","plugin","PouchDBFind","createIndex","ddoc","fields","then","result","console","log","catch","error","create","model","a","put","ok","readAll","query","selector","$gte","sort","find","results","findById","folioId","$eq","validate","errors","createFolio","Date","now","toString","getFolios","docs","getFolio","HomePage","state","f","setState","this","Component","TextInput","fullWidth","TextField","selectProps","SelectInput","options","optionKey","optionLabel","Select","formControlProps","option","value","FolioForm","onSubmit","history","push","allocation","equity","debt","bullion","cash","validateOnBlur","initialValues","render","handleSubmit","noValidate","FolioFormComponent","Grid","container","direction","justify","spacing","item","xs","lg","required","Button","ListIcon","AssetListItem","asset","fi","holder","nav","ListItemSecondaryAction","AssetList","assets","findByFolioId","use_index","assetId","ASSET_TYPE","ASSET_INSTITUTION","ASSET_HOLDER","createAsset","updateAsset","getAssetsByFolioId","getAsset","Folio","onTabChange","event","match","params","_folio","_assets","Paper","elevation","Tabs","onChange","indicatorColor","textColor","Tab","AssetForm","IAssetForm","TxnListItem","txn","date","amount","TxnList","txns","dense","AbstractService","dao","id","_model","getDao","txn_date_assetId","instance","dbName","getDB","objId","Object","freeze","txnDao","isCreated","calcAndUpdateAsset","findByAssetId","getTxnByAssetId","deposit","reduce","sumDeposit","credit","sumCredit","reduceNAV","txnService","TXN_TYPE","total","parseFloat","i","length","Asset","_asset","_txns","Divider","TxnForm","createTxn","ITxnForm","InputLabelProps","shrink","PageRouter","path","exact","mode","createMuiTheme","typography","fontFamily","overrides","MuiCssBaseline","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8866de96.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst origin = {\r\n    vertical: 'top',\r\n    horizontal: 'right'\r\n}\r\n\r\nexport const PageMenu = ({ menuProps }) => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    const handleOpen = () => setOpen(true)\r\n    const handleClose = () => setOpen(false)\r\n\r\n    if (menuProps == null) return null\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MoreIcon onClick={handleOpen} />\r\n            <Menu anchorOrigin={origin} transformOrigin={origin} keepMounted\r\n                open={open} onClose={handleClose}>\r\n                <React.Fragment>\r\n                    {menuProps.map( ({url, label}) => (\r\n                        <MenuItem component=\"a\" href={url}>{label}</MenuItem>\r\n                    ))}\r\n                </React.Fragment>\r\n            </Menu>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nimport { PageMenu } from './PageMenu'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        paddingLeft: '16px',\r\n        paddingRight: '16px',\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport const PageBar = ({ title, iconProps, menuProps }) => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <PageIcon iconProps={iconProps} />\r\n                <PageTitle title={title} />\r\n                <PageMenu menuProps={menuProps} />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nconst PageIcon = ({iconProps}) => {\r\n    const { type, url } = iconProps\r\n    return (\r\n        <Link href={url} color=\"inherit\">\r\n            {iconStrategy(type)}\r\n        </Link>\r\n    )\r\n}\r\n\r\n\r\nconst PageTitle = ({ title }) => {\r\n    const style = useStyles();\r\n    return (\r\n        <Typography variant=\"h6\" className={style.title}>\r\n            {title}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nconst iconStrategy = (type) => {\r\n    switch (type) {\r\n        case 'Home':\r\n            return <HomeIcon />\r\n        case 'Back':\r\n            return <ArrowBackIcon />\r\n        default:\r\n            return null;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { PageBar } from './PageBar'\r\n\r\nexport const Page = (props) => {\r\n    const {title, iconProps, menuProps} = props\r\n    const {children} = props\r\n    return (\r\n        <React.Fragment>\r\n            <PageBar title={title} iconProps={iconProps} menuProps={menuProps} />\r\n            {children}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nconst style = {\r\n    CardHeader: {\r\n        paddingBottom: '0px'\r\n    },\r\n    content: {\r\n        paddingTop: '0px'\r\n    }\r\n}\r\n\r\nconst titleTypographyProps = {\r\n    variant: 'h6'\r\n}\r\n\r\nexport const Section = ({ title, index, selectedTab, children }) => {\r\n    if (index != selectedTab) return null\r\n    return (\r\n        <Card>\r\n            <CardHeader\r\n                style={style.CardHeader}\r\n                title={title}\r\n                titleTypographyProps={titleTypographyProps} />\r\n            <CardContent style={style.content}>\r\n                {children}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { deepPurple } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    orange: {\r\n        color: theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor: deepOrange[500],\r\n    },\r\n    purple: {\r\n        color: theme.palette.getContrastText(deepPurple[500]),\r\n        backgroundColor: deepPurple[500],\r\n    }\r\n}));\r\n\r\nexport const PortfolioListIcon = ({letter}) => {\r\n    const classes = useStyles();\r\n    const randColor = randomColor();\r\n    const avatarColor = classes[randColor]\r\n    return (\r\n        <ListItemAvatar>\r\n            <Avatar className={avatarColor}>{letter}</Avatar>\r\n        </ListItemAvatar>\r\n    )\r\n}\r\n\r\nfunction randomColor() {\r\n    const randNumber = Math.floor(Math.random() * 5) + 1; \r\n    switch(randNumber) {\r\n        case 1: return 'orange';\r\n        case 2: return 'orange';\r\n        case 3: return 'purple';\r\n        case 4: return 'purple';\r\n        case 5: return 'orange';\r\n        default: return '';\r\n      }\r\n}","import React from 'react'\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { PortfolioListIcon } from './PortfolioListIcon'\r\n\r\nexport const PortfolioListItem = ({ folio }) => {\r\n    const { _id, name, desc } = folio\r\n    const letter = name.charAt(0).toUpperCase()\r\n    return (\r\n        <ListItem key={_id} button component=\"a\" href={`/folio/view/${_id}`}>\r\n            <PortfolioListIcon letter={letter} />\r\n            <ListItemText \r\n                primary={name} \r\n                secondary={desc}/>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { PortfolioListItem } from './PortfolioListItem'\r\n\r\nexport const PortfolioList = ({ folios }) => {\r\n    if(folios == null) return null\r\n    return (\r\n        <List>\r\n            {folios.map(folio => <PortfolioListItem folio={folio} />)}\r\n        </List>\r\n    )\r\n}","import PouchDB from 'pouchdb';\r\nimport PouchDBFind from 'pouchdb-find'\r\n\r\nconst db = new PouchDB('PORTFOLIO');\r\nPouchDB.plugin(PouchDBFind);\r\n\r\nconst nameIndex = {\r\n  index: {\r\n    ddoc: \"portfolio-name\",\r\n    fields: ['name']\r\n  }\r\n}\r\n\r\ndb.createIndex(nameIndex)\r\n  .then(result => { console.log(result) })\r\n  .catch(error => { console.log(error) })\r\n\r\nexport const create = async (model) => {\r\n  try {\r\n    var result = await db.put(model)\r\n    return result.ok\r\n  } catch (error) {\r\n    console.log(error)\r\n    return false\r\n  }\r\n}\r\n\r\nexport const readAll = async () => {\r\n  const query = {\r\n    selector: {\r\n      name: { $gte: null }\r\n    },\r\n    fields: ['_id', 'name', 'desc'],\r\n    sort: ['name']\r\n  }\r\n\r\n  try {\r\n    var results = await db.find(query);\r\n    return results;\r\n  } catch (err) {\r\n      console.log(err);\r\n  }\r\n}\r\n\r\nexport const findById = async (folioId) => {\r\n  const query = {\r\n    selector: {\r\n      _id: { $eq: folioId }\r\n    },\r\n    fields: ['_id', 'name']\r\n  }\r\n\r\n  try {\r\n    var results = await db.find(query);\r\n    return results;\r\n  } catch (err) {\r\n      console.log(err);\r\n  }\r\n}","import { create, readAll, findById} from './PortfolioDAO'\r\n\r\nexport const validate = async(folio) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nexport const createFolio = async (folio) => {\r\n\r\n    const folioId = Date.now().toString();\r\n    const model = {\r\n        _id: folioId,\r\n        ...folio\r\n    }\r\n    return await create(model);\r\n}\r\n\r\nexport const getFolios = async () => {\r\n    const folios =  await readAll();\r\n    return folios?.docs;\r\n}\r\n\r\nexport const getFolio = async (folioId) => {\r\n    const folio = await findById(folioId)\r\n    return (folio?.docs)?.[0];\r\n}","import React from 'react'\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { PortfolioList } from '../components/PortfolioList'\r\n\r\nimport { getFolios } from '../service/PortfolioService'\r\n\r\nexport class HomePage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            folios: []\r\n        }\r\n        \r\n        this.iconProps = { \r\n            type: 'Home' \r\n        }\r\n\r\n        this.menuProps = [\r\n            {label: 'Create Portfolio', url: `/folio/new`}\r\n        ]\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        getFolios().then(f => {\r\n            this.setState({ folios: f })\r\n        })       \r\n    }    \r\n\r\n    render() {\r\n        const {iconProps, menuProps} = this\r\n        const {folios} = this.state\r\n        return (\r\n            <Page title='Asset Manager' iconProps={iconProps} menuProps={menuProps} >                \r\n                <Section title='Portfolio'>\r\n                    <PortfolioList folios={folios} />   \r\n                </Section>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { TextField } from 'final-form-material-ui';\r\nimport { Select } from 'final-form-material-ui';\r\nimport { Field } from 'react-final-form'\r\n\r\nexport const TextInput = (props) => {\r\n    return (<Field fullWidth component={TextField} {...props} />)\r\n}\r\n\r\nconst selectProps = {\r\n    fullWidth: true\r\n}\r\n\r\nexport const SelectInput = (props) => {\r\n    const {name, label, options} = props\r\n    const {optionKey, optionLabel} = props\r\n    \r\n    return (\r\n        <Field name={name} label={label} fullWidth component={Select} formControlProps={selectProps} >\r\n            {options.map( option => (\r\n                <MenuItem value={option[optionKey]}>\r\n                    {option[optionLabel]}\r\n                </MenuItem>\r\n            ))}\r\n        </Field>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Form } from 'react-final-form'\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { TextInput } from '../components/Form'\r\n\r\nimport { validate, createFolio } from '../service/PortfolioService'\r\n\r\n\r\n\r\nexport class FolioForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            folio: {\r\n                allocation: {\r\n                    equity: 25, debt: 25, bullion: 25, cash: 25\r\n                }\r\n            }\r\n        }\r\n\r\n        this.iconProps = { \r\n            type: 'Back', url:  '/'\r\n        }\r\n    }\r\n\r\n    onSubmit = async (folio) => {\r\n        const result = createFolio(folio)\r\n        if(result) {\r\n            this.props.history.push('/')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {iconProps} = this\r\n        return (\r\n            <Page title='Portfolio Form' iconProps={iconProps}>\r\n                <Section title=\"Create Portfolio\">\r\n                    <br />\r\n                    <Form onSubmit={this.onSubmit}\r\n                        validateOnBlur={true} validate={validate}\r\n                        initialValues={this.state.folio}\r\n                        render={(props) => (\r\n                            <form onSubmit={props.handleSubmit} noValidate>\r\n                                <FolioFormComponent {...props} />\r\n                            </form>\r\n                        )} />\r\n                </Section>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\nconst FolioFormComponent = () => {\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"space-evenly\" spacing=\"5\">\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <TextInput name=\"name\" label=\"Name\" required />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <TextInput name=\"desc\" label=\"Description\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"3\">\r\n                <TextInput name=\"allocation.equity\" label=\"Equity\" type=\"number\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"3\">\r\n                <TextInput name=\"allocation.debt\" label=\"Debt\" type=\"number\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"3\">\r\n                <TextInput name=\"allocation.bullion\" label=\"Bullion\" type=\"number\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"3\">\r\n                <TextInput name=\"allocation.cash\" label=\"Cash\" type=\"number\" />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { deepPurple } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    orange: {\r\n        color: theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor: deepOrange[500],\r\n    },\r\n    purple: {\r\n        color: theme.palette.getContrastText(deepPurple[500]),\r\n        backgroundColor: deepPurple[500],\r\n    }\r\n}));\r\n\r\nexport const ListIcon = ( {letter} ) => {\r\n    const classes = useStyles();\r\n    const randColor = randomColor();\r\n    const avatarColor = classes[randColor]\r\n    return (\r\n        <ListItemAvatar>\r\n            <Avatar className={avatarColor}>{letter}</Avatar>\r\n        </ListItemAvatar>\r\n    )\r\n}\r\n\r\nfunction randomColor() {\r\n    const randNumber = Math.floor(Math.random() * 5) + 1; \r\n    switch(randNumber) {\r\n        case 1: return 'orange';\r\n        case 2: return 'orange';\r\n        case 3: return 'purple';\r\n        case 4: return 'purple';\r\n        case 5: return 'orange';\r\n        default: return '';\r\n      }\r\n}","import React from 'react'\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nimport { ListIcon } from '../ListIcon'\r\n\r\nconst style = {\r\n    ListItem : {\r\n        paddingLeft: '4px'\r\n    }\r\n}\r\n\r\nexport const AssetListItem = ({ asset }) => {\r\n    const { _id, name, type, fi, holder, nav } = asset\r\n    const letter = type?.charAt(0).toUpperCase()\r\n    const href = `/asset/view/${_id}`\r\n    return (\r\n        <ListItem key={_id} button component=\"a\" href={href} style={style.ListItem} >\r\n            <ListIcon letter={letter} />\r\n            <ListItemText \r\n                primary={name}\r\n                secondary={`${fi} - ${holder}`} />                \r\n            <ListItemSecondaryAction>{nav}</ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { AssetListItem } from './AssetListItem'\r\n\r\nexport const AssetList = ({ assets }) => {\r\n    if(assets == null) return null\r\n    return (\r\n        <List>\r\n            {assets.map(asset => <AssetListItem asset={asset} />)}\r\n        </List>\r\n    )\r\n}","import PouchDB from 'pouchdb';\r\nimport PouchDBFind from 'pouchdb-find'\r\n\r\nconst db = new PouchDB('ASSET');\r\nPouchDB.plugin(PouchDBFind);\r\n\r\nconst nameIndex = {\r\n  index: {\r\n    ddoc: \"asset-folioId\",\r\n    fields: ['folioId']\r\n  }\r\n}\r\n\r\ndb.createIndex(nameIndex)\r\n  .then(result => { console.log(result) })\r\n  .catch(error => { console.log(error) })\r\n\r\n\r\nexport const create = async (model) => {\r\n  try {\r\n    var result = await db.put(model)\r\n    return result.ok\r\n  } catch (error) {\r\n    console.log(error)\r\n    return false\r\n  }\r\n}\r\n\r\nconst find = async (query) => {\r\n  try {\r\n    var results = await db.find(query);\r\n    return results;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport const findByFolioId = async (folioId) => {\r\n  const query = {\r\n    use_index: 'asset-folioId',\r\n    selector: { folioId: { $eq: folioId } },\r\n    fields: ['_id', 'name', 'type', 'fi', 'holder', 'nav']\r\n  }  \r\n  return find(query)\r\n}\r\n\r\nexport const findById = async (assetId) => {\r\n  const query = {\r\n    selector: { _id: { $eq: assetId } }\r\n  }\r\n  return find(query)\r\n}","import { create, findByFolioId, findById} from './AssetDAO'\r\n\r\nexport const ASSET_TYPE = [\r\n    { key: \"Equity\", value: \"Equity\" },\r\n    { key: \"Debt\", value: \"Debt\" },\r\n    { key: \"Bullion\", value: \"Bullion\" },\r\n    { key: \"Cash\", value: \"Cash\" }\r\n]\r\n\r\nexport const ASSET_INSTITUTION = [\r\n    { key: \"NPS\",  value: \"NPS\"  },\r\n    { key: \"DBS\",  value: \"DBS\"  },\r\n    { key: \"SBI\",  value: \"SBI\"  },\r\n    { key: \"CITI\", value: \"CITI\" },\r\n    { key: \"EPFO\", value: \"EPFO\" }\r\n]\r\n\r\nexport const ASSET_HOLDER = [\r\n    { key: \"Santosh\", value: \"Santosh\" },\r\n    { key: \"Lavanya\",  value: \"Lavanya\" }\r\n]\r\n\r\nexport const validate = async(asset) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nexport const createAsset = async (asset) => {\r\n\r\n    const assetId = Date.now().toString();\r\n    const model = {\r\n        _id: assetId,\r\n        ...asset\r\n    }\r\n    return await create(model);\r\n}\r\n\r\nexport const updateAsset = async (asset) => {\r\n    create(asset);\r\n}\r\n\r\nexport const getAssetsByFolioId = async (folioId) => {\r\n    const assets =  await findByFolioId(folioId);\r\n    return assets?.docs;\r\n}\r\n\r\nexport const getAsset = async (assetId) => {\r\n    const asset =  await findById(assetId);\r\n    return (asset?.docs)?.[0];\r\n}","import React from 'react'\r\n\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { AssetList } from '../components/AssetList'\r\n\r\nimport { getFolio } from '../service/PortfolioService'\r\nimport { getAssetsByFolioId } from '../service/asset/AssetService'\r\n\r\nexport class Folio extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)    \r\n\r\n        const { folioId } = this.props.match.params\r\n        \r\n        this.state = {\r\n            folio: {\r\n                _id: folioId\r\n            },\r\n            assets: {},\r\n            selectedTab: 0\r\n        }       \r\n\r\n\r\n\r\n        this.iconProps = { \r\n            type: 'Back', url: '/' \r\n        }\r\n\r\n        this.menuProps = [\r\n            {label: 'Add Asset', url: `/asset/${folioId}/new`}\r\n        ]\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { folio } = this.state\r\n\r\n        const _folio = await getFolio(folio._id)\r\n        this.setState({ folio: _folio })\r\n\r\n        const _assets = await getAssetsByFolioId(folio._id)\r\n        this.setState({ assets: _assets })\r\n    }\r\n\r\n    onTabChange = (event, value) => {\r\n        this.setState({ selectedTab: value })\r\n    }\r\n\r\n    render() {\r\n        const {iconProps, menuProps} = this\r\n        const { folio, assets, selectedTab } = this.state\r\n     \r\n        return (\r\n            <Page title={folio.name} iconProps={iconProps} menuProps={menuProps}>\r\n\r\n                <Paper elevation=\"5\">\r\n                    <Tabs value={selectedTab} onChange={this.onTabChange}\r\n                        variant=\"fullWidth\" indicatorColor=\"primary\" textColor=\"primary\" >\r\n                        <Tab label=\"Allocation\" />\r\n                        <Tab label=\"Assets\" />\r\n                    </Tabs>\r\n                </Paper>\r\n\r\n                <Section title=\"Allocation\" index=\"0\" selectedTab={selectedTab}>\r\n\r\n                </Section>\r\n\r\n                <Section title=\"Assets\" index=\"1\" selectedTab={selectedTab}>\r\n                    <AssetList assets={assets} />\r\n                </Section>\r\n\r\n\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Form } from 'react-final-form'\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { TextInput, SelectInput } from '../components/Form'\r\n\r\nimport { ASSET_TYPE, ASSET_INSTITUTION, ASSET_HOLDER } from '../service/asset/AssetService'\r\nimport { validate, createAsset } from '../service/asset/AssetService'\r\n\r\nexport class AssetForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { folioId } = this.props.match.params\r\n\r\n        this.state = {\r\n            asset: {\r\n                folioId: folioId\r\n            }\r\n        }\r\n\r\n        this.iconProps = { \r\n            type: 'Back', url: `/folio/view/${folioId}` \r\n        }\r\n    }\r\n\r\n    onSubmit = async (asset) => {\r\n        const result = createAsset(asset)\r\n        if(result) {\r\n            this.props.history.push(this.iconProps.url)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {iconProps} = this\r\n        const {asset} = this.state\r\n        return (\r\n            <Page title='Asset Form' iconProps={iconProps}>\r\n                <Section title=\"Add Asset\">\r\n                    <Form onSubmit={this.onSubmit}\r\n                        validateOnBlur={true} validate={validate}\r\n                        initialValues={ asset }\r\n                        render={(props) => (\r\n                            <form onSubmit={props.handleSubmit} noValidate>\r\n                                <IAssetForm {...props} />\r\n                            </form>\r\n                        )} />\r\n                </Section>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst IAssetForm = (props) => {\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"space-evenly\" spacing=\"5\">\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <TextInput name=\"name\" label=\"Name\" required />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">               \r\n                <SelectInput name=\"type\" label=\"Type\" \r\n                    options={ASSET_TYPE} optionKey=\"key\" optionLabel=\"value\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"6\">               \r\n                <SelectInput name=\"fi\" label=\"Institution\" \r\n                    options={ASSET_INSTITUTION} optionKey=\"key\" optionLabel=\"value\" />\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"6\">               \r\n                <SelectInput name=\"holder\" label=\"Holder\" \r\n                    options={ASSET_HOLDER} optionKey=\"key\" optionLabel=\"value\" />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nimport { ListIcon } from '../ListIcon'\r\n\r\nconst style = {\r\n    ListItem : {\r\n        paddingLeft: '4px'\r\n    }\r\n}\r\n\r\nexport const TxnListItem = ( {txn} ) => {\r\n    const { _id, date, type, amount } = txn\r\n    const letter = type?.charAt(0).toUpperCase()\r\n    const href = `#`\r\n    return (\r\n        <ListItem key={_id} button component=\"a\" href={href} style={style.ListItem} >\r\n            <ListIcon letter={letter} />\r\n            <ListItemText primary={date} secondary={type} />                \r\n            <ListItemSecondaryAction>{amount}</ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { TxnListItem } from './TxnListItem'\r\n\r\nexport const TxnList = ( {txns} ) => {\r\n    if( txns == null ) return null\r\n    return (\r\n        <List dense=\"true\">\r\n            { txns.map( txn => <TxnListItem txn={txn} /> )}\r\n        </List>\r\n    )\r\n}","export class AbstractService {\r\n\r\n    #dao = null\r\n\r\n    constructor(dao) {\r\n        this.#dao = dao\r\n        console.log('AbstractService::constructor')\r\n    }\r\n\r\n    getDao() {\r\n        return this.#dao\r\n    }\r\n\r\n    async create(model) {\r\n        const id = Date.now().toString();\r\n        const _model = {\r\n            _id: id,\r\n            ...model\r\n        }        \r\n        return this.getDao().put(_model);\r\n    }\r\n}\r\n\r\n","import { AbstractDao } from './AbstractDao'\r\n\r\nconst txn_date_assetId = {\r\n    index: { ddoc: 'txn_date_assetId', fields: ['date', 'assetId'] }\r\n}\r\n\r\nclass TxnDao extends AbstractDao {\r\n\r\n    constructor(dbName) {\r\n        super(dbName)\r\n        console.log('TxnDao::constructor')\r\n        super.createIndex(txn_date_assetId)\r\n    }\r\n\r\n    async findByAssetId(assetId) {\r\n        const query = {\r\n            use_index: 'txn_date_assetId',\r\n            selector: {\r\n                date: { $gte: null },\r\n                assetId: { $eq: assetId }\r\n            },\r\n            sort: [{ date: 'desc' }]\r\n        }\r\n        return super.find(query)\r\n    }\r\n}\r\n\r\nconst instance = new TxnDao('TXN')\r\nObject.freeze(instance);\r\nexport const txnDao = instance;\r\n","import PouchDB from 'pouchdb';\r\nimport PouchDBFind from 'pouchdb-find'\r\n\r\nexport class AbstractDao {\r\n\r\n    #db = null\r\n\r\n    constructor(dbName) {\r\n        PouchDB.plugin(PouchDBFind);\r\n        this.#db = new PouchDB(dbName);\r\n    }\r\n\r\n    getDB() {\r\n        return this.#db\r\n    }\r\n\r\n    createIndex(index) {\r\n        this.getDB().createIndex(index)\r\n            .then(result => console.log(result))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    async put(model) {\r\n        try {\r\n            const result = await this.getDB().put(model)\r\n            return result.ok\r\n        } catch (error) {\r\n            console.log(error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    async find(query) {\r\n        try {\r\n            return this.getDB().find(query);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async findById(objId) {\r\n        const query = {\r\n            selector: { _id: { $eq: objId } }\r\n        }\r\n        return this.find(query)\r\n    }\r\n}\r\n\r\n","import { AbstractService } from './AbstractService'\r\nimport { txnDao } from '../dao/TxnDao'\r\nimport { getAsset, updateAsset } from './asset/AssetService'\r\n\r\nclass TxnService extends AbstractService {\r\n\r\n    constructor() {\r\n        super(txnDao)\r\n        console.log('TxnService::constructor')\r\n    }\r\n\r\n    async validate(txn) {\r\n        const errors = {};\r\n        return errors;\r\n    }    \r\n\r\n    async createTxn(txn) {\r\n        let isCreated = await super.create(txn);\r\n    \r\n        if(isCreated) {\r\n            this.calcAndUpdateAsset(txn.assetId)\r\n        }    \r\n        return isCreated\r\n    }\r\n\r\n    async getTxnByAssetId(assetId) {     \r\n        const txns =  await txnDao.findByAssetId(assetId);\r\n        return txns?.docs\r\n    }\r\n\r\n    async calcAndUpdateAsset(assetId) {\r\n        const txns = await this.getTxnByAssetId(assetId) \r\n        const asset = await getAsset(assetId)\r\n        console.log(asset)\r\n        asset.deposit = txns.reduce(sumDeposit, 0)\r\n        asset.credit  = txns.reduce(sumCredit,  0)\r\n        asset.nav    = reduceNAV(txns)\r\n        console.log(asset)\r\n        updateAsset(asset)        \r\n    }\r\n}\r\n\r\nconst instance = new TxnService()\r\nObject.freeze(instance);\r\nexport const txnService = instance;\r\n\r\n\r\nexport const TXN_TYPE = [\r\n    { key: \"Deposit\", value: \"Deposit\" },\r\n    { key: \"Credit\",  value: \"Credit\"  },\r\n    { key: \"NAV\",     value: \"NAV\"     }\r\n]\r\n\r\nconst sumDeposit = (total, txn) => {\r\n    if(txn.type == 'Deposit') {\r\n        return (total + parseFloat(txn.amount))\r\n    } \r\n    return total;      \r\n}\r\n\r\nconst sumCredit = (total, txn) => {\r\n    if(txn.type == 'Credit') {\r\n        return (total + parseFloat(txn.amount))\r\n    } \r\n    return total;      \r\n}\r\n\r\nconst reduceNAV = (txns) => {\r\n    let total = 0\r\n    for(let i=0; i<txns.length; i++) {\r\n        const txn = txns[i]\r\n        total = total + parseFloat(txn.amount); \r\n        \r\n        if(txn.type == 'NAV') {\r\n            break;     \r\n        }\r\n    }\r\n    return total\r\n}","import React from 'react'\r\n\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { TxnList } from '../components/TxnList'\r\n\r\nimport { getAsset } from '../service/asset/AssetService'\r\nimport { txnService } from '../service/TxnService'\r\n\r\nexport class Asset extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { assetId } = this.props.match.params\r\n\r\n        this.state = {\r\n            asset: {\r\n                _id: assetId\r\n            },\r\n            txns: [],\r\n\r\n            selectedTab: 0\r\n        }\r\n\r\n        this.iconProps = {\r\n            type: 'Back', url: '/'\r\n        }\r\n\r\n        this.menuProps = [\r\n            { label: 'Add Transaction', url: `/txn/${assetId}/new` }\r\n        ]\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { asset } = this.state\r\n\r\n        const _asset = await getAsset(asset._id)\r\n        this.setState({ asset: _asset })\r\n\r\n        const _txns = await txnService.getTxnByAssetId(asset._id)\r\n        this.setState({ txns: _txns })\r\n    }\r\n\r\n    onTabChange = (event, value) => {\r\n        this.setState({ selectedTab: value })\r\n    }\r\n\r\n    render() {\r\n        const { iconProps, menuProps } = this\r\n        const { asset, txns, selectedTab } = this.state\r\n\r\n        return (\r\n            <Page title={asset.name} iconProps={iconProps} menuProps={menuProps}>\r\n                <Paper elevation=\"5\">\r\n                    <Tabs value={selectedTab} onChange={this.onTabChange}\r\n                        variant=\"fullWidth\" indicatorColor=\"primary\" textColor=\"primary\" >\r\n                        <Tab label=\"Asset Details\" />\r\n                        <Tab label=\"Transaction\" />\r\n                    </Tabs>\r\n                </Paper>\r\n\r\n                <Section title=\"Asset Details\" index=\"0\" selectedTab={selectedTab}>\r\n                   \r\n                    <List component=\"li\" dense=\"true\">\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Asset Type\" />\r\n                            <ListItemSecondaryAction>{asset.type}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Institution\" />\r\n                            <ListItemSecondaryAction>{asset.fi}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Holder\" />\r\n                            <ListItemSecondaryAction>{asset.holder}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Net Asset Value\" />\r\n                            <ListItemSecondaryAction>{asset.nav}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Deposit\" />\r\n                            <ListItemSecondaryAction>{asset.deposit}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem>\r\n                            <ListItemText primary=\"Credit\" />\r\n                            <ListItemSecondaryAction>{asset.credit}</ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    </List>\r\n                </Section>\r\n\r\n                <Section title=\"Transaction\" index=\"1\" selectedTab={selectedTab}>\r\n                    <TxnList txns={txns} />\r\n                </Section>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Form } from 'react-final-form'\r\n\r\nimport { Page } from '../components/Page'\r\nimport { Section } from '../components/Page/Section'\r\nimport { TextInput, SelectInput } from '../components/Form'\r\n\r\nimport { TXN_TYPE } from '../service/TxnService'\r\nimport { txnService } from '../service/TxnService'\r\n\r\n\r\nexport class TxnForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { assetId } = this.props.match.params\r\n\r\n        this.state = {\r\n            txn: {\r\n                assetId: assetId\r\n            }\r\n        }\r\n\r\n        this.iconProps = { \r\n            type: 'Back', url: `/asset/view/${assetId}` \r\n        }\r\n    }\r\n\r\n    onSubmit = async (txn) => {\r\n        const result = txnService.createTxn(txn)\r\n        if(result) {\r\n            this.props.history.push(this.iconProps.url)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {iconProps} = this\r\n        const { txn } = this.state\r\n        return (\r\n            <Page title='Transaction Form' iconProps={iconProps}>\r\n                <Section title=\"Add Transaction\">\r\n                    <br/>\r\n                    <Form onSubmit={this.onSubmit}\r\n                        validateOnBlur={true} validate={txnService.validate}\r\n                        initialValues={ txn }\r\n                        render={(props) => (\r\n                            <form onSubmit={props.handleSubmit} noValidate>\r\n                                <ITxnForm {...props} />\r\n                            </form>\r\n                        )} />\r\n                </Section>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst ITxnForm = (props) => {\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"space-evenly\" spacing=\"5\">\r\n            <Grid item xs=\"6\" lg=\"6\">\r\n                <TextInput name=\"date\" label=\"Date\" type=\"date\" required \r\n                    InputLabelProps={{ shrink: true }}/>\r\n            </Grid>\r\n            <Grid item xs=\"6\" lg=\"6\">               \r\n                <SelectInput name=\"type\" label=\"Type\" required\r\n                    options={TXN_TYPE} optionKey=\"key\" optionLabel=\"value\" />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">               \r\n                <TextInput name=\"amount\" label=\"Amount\" type=\"number\" required />\r\n            </Grid>\r\n            <Grid item xs=\"12\" lg=\"12\">\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { HomePage } from './HomePage'\nimport { FolioForm } from './FolioForm'\nimport { Folio } from './Folio'\nimport { AssetForm } from './AssetForm'\nimport { Asset } from './Asset'\nimport { TxnForm } from './TxnForm'\n\nexport const PageRouter = () => {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Route path=\"/\" exact component={HomePage} />\n\t\t\t<Route\n\t\t\t\tpath=\"/folio/new\"\n\t\t\t\trender={props => <FolioForm {...props} />} />\n\n\t\t\t<Route\n\t\t\t\tpath='/folio/view/:folioId'\n\t\t\t\trender={props => <Folio {...props} />} />\n\n\t\t\t<Route\n\t\t\t\tpath=\"/asset/:folioId/new\"\n\t\t\t\trender={props => <AssetForm mode=\"New\" {...props} />} />\n\n\t\t\t<Route\n\t\t\t\tpath=\"/asset/view/:assetId/\"\n\t\t\t\trender={props => <Asset {...props} />} />\n\n\t\t\t<Route\n\t\t\t\tpath=\"/txn/:assetId/new\"\n\t\t\t\trender={props => <TxnForm mode=\"New\" {...props} />} />\n\n\t\t</BrowserRouter>\n\t)\n}\n\n\n\n\n","import React from 'react';\n\nimport { ThemeProvider } from '@material-ui/core';\nimport { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core';\n\nimport { PageRouter } from './page/PageRouter'\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: \"Rubik\"\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"@font-face\": 'Rubik'\n      }\n    }\n  }\n});\n\n\nexport const App = () => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n        <PageRouter />\n    </ThemeProvider>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}